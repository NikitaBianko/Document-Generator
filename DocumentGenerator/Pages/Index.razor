@page "/"

@using System.Text
@using Models
@using System

@inject IJSRuntime JSRuntime
@inject HttpClient HttpClient
@inject NavigationManager Navigator

<div class="col-4">
    <h1>Document Generator</h1>

    <EditForm Model="@Document" OnValidSubmit="@GetDocument">
        <DataAnnotationsValidator />
        <div class="form-group">
            <label>Name:</label>
            <InputText class="form-control" @bind-Value=Document.name name="name" id="Name" />
            <ValidationMessage For="() => Document.name" />
        </div>
        <div class="form-group">
            <label>Month:</label>
            <input type="month" class="form-control" @bind-value="Document.workingMonth" name="month" />
            <ValidationMessage For="() => Document.workingMonth" />
        </div>
        <div class="form-group">
            <label>Total working hours:</label>
            <InputNumber class="form-control" @bind-Value=Document.totalHours step="0.5" name="totalHours" />
            <ValidationMessage For="() => Document.totalHours" />
        </div>
        <div class="form-group">
            <label>Minimum Daily Working hours:</label>
            <InputNumber class="form-control" @bind-Value=Document.minWorkingHours name="minWorkingHours" step="0.5" />
            <ValidationMessage For="() => Document.minWorkingHours" />
        </div>
        <div class="form-group">
            <label>Maximum Daily Working hour:</label>
            <InputNumber class="form-control" @bind-Value=Document.maxWorkingHours name="maxWorkingHours" step="0.5" />
            <ValidationMessage For="() => Document.maxWorkingHours" />
        </div>
        <div class="form-group">
            <label>Workday starts at:</label>
            <InputText class="form-control" @bind-Value=Document.startWorkingDay name="startWorkingDay" />
            <ValidationMessage For="() => Document.startWorkingDay" />
        </div>
        <div class="form-group">
            <label>Workday ends at:</label>
            <InputText class="form-control" @bind-Value="Document.endWorkingDay" name="endWorkingDay" />
            <ValidationMessage For="() => Document.endWorkingDay" />
        </div>
        <div class="form-group">
            <label>type of downloaded document:</label>
            <InputSelect class="form-control" @bind-Value=Document.typeOfFile name="typeOfFile">
                <option value="pdf" selected>pdf</option>
                <option value="html">html</option>
            </InputSelect>
            <ValidationMessage For="() => Document.typeOfFile" />
        </div>
        <button type="submit" class="btn btn-outline-primary">Generate</button>
    </EditForm>
</div>

@code {
    DocumentModel Document = new DocumentModel();

    protected async override Task OnInitializedAsync()
    {
        Document.holidays = await HttpClient.GetJsonAsync<List<DateTime>>($"{Navigator.BaseUri}api/holidays");
        Document.totalHours = 160;
        Document.minWorkingHours = 4;
        Document.maxWorkingHours = Rounding(Document.totalHours / Document.numberOfWorkingDaysOfMonth) + 0.5;
        Document.startWorkingDay = "7:00";
        Document.endWorkingDay = (TimeSpan.Parse(Document.startWorkingDay) + TimeSpan.FromHours(Document.maxWorkingHours)).ToString(@"hh\:mm");

    }

    private double Rounding(double n)
    {
        int m = (int)(n / 0.5);

        if (n - (m * 0.5) >= 0.5) return m + 0.5;
        else return m * 0.5;
    }

    public async Task GetDocument()
    {

        string request = $"?name={Document.name}&workingMonth={Document.workingMonth.ToString("MM-yyyy")}" +
                        $"&totalHours={Document.totalHours}&minWorkingHours={Document.minWorkingHours}" +
                        $"&maxWorkingHours={Document.maxWorkingHours}&startWorkingDay={Document.startWorkingDay}" +
                        $"&endWorkingDay={Document.endWorkingDay}&typeOfFile={Document.typeOfFile}";

        await JSRuntime.InvokeAsync<object>("open", "document" + request, "_blank");
    }
}
